"use strict";(self.webpackChunkmermaid_editor=self.webpackChunkmermaid_editor||[]).push([[91],{"./features/flowchart/components/edge/arrow-type-selector.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ArrowTypeSelector});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/next@14.1.0_@babel+core@7.28.3_babel-plugin-macros@3.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-runtime.js"),_yamada_ui_lucide__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/.pnpm/@yamada-ui+lucide@1.10.5_@types+react@18.3.23_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@yamada-ui/lucide/dist/chunk-PQIMNVG7.mjs"),_yamada_ui_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/.pnpm/@yamada-ui+button@1.0.59_@emotion+is-prop-valid@1.3.1_@types+react@18.3.23_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@yamada-ui/button/dist/chunk-QQERBTQW.mjs"),_yamada_ui_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/.pnpm/@yamada-ui+portal@1.0.30_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@yamada-ui/portal/dist/chunk-L2QJFRDD.mjs"),_yamada_ui_react__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/.pnpm/@yamada-ui+menu@1.5.7_@emotion+is-prop-valid@1.3.1_@types+react@18.3.23_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@yamada-ui/menu/dist/chunk-HWUNOGPF.mjs"),_yamada_ui_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/.pnpm/@yamada-ui+menu@1.5.7_@emotion+is-prop-valid@1.3.1_@types+react@18.3.23_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@yamada-ui/menu/dist/chunk-BIEYDHFO.mjs"),_yamada_ui_react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/.pnpm/@yamada-ui+menu@1.5.7_@emotion+is-prop-valid@1.3.1_@types+react@18.3.23_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@yamada-ui/menu/dist/chunk-3UTYG3XF.mjs"),_yamada_ui_react__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/.pnpm/@yamada-ui+menu@1.5.7_@emotion+is-prop-valid@1.3.1_@types+react@18.3.23_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@yamada-ui/menu/dist/chunk-D2UJVOJ7.mjs"),_hooks_mermaid__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./features/flowchart/hooks/mermaid.ts"),_types_types__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./features/flowchart/types/types.ts");const ArrowTypeSelector=({currentArrowType,onArrowTypeChange})=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_yamada_ui_react__WEBPACK_IMPORTED_MODULE_5__.W,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_yamada_ui_react__WEBPACK_IMPORTED_MODULE_6__.I,{className:"arrow-type-selector-button",as:_yamada_ui_react__WEBPACK_IMPORTED_MODULE_2__.K,"aria-label":"Select arrow type",icon:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_yamada_ui_lucide__WEBPACK_IMPORTED_MODULE_1__.D,{}),size:"xs",variant:"outline",bg:"white",border:"1px solid",borderColor:"gray.300",_hover:{bg:"gray.50"}}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_yamada_ui_react__WEBPACK_IMPORTED_MODULE_3__.Z,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_yamada_ui_react__WEBPACK_IMPORTED_MODULE_4__.c,{bg:"white",boxShadow:"lg",border:"1px solid",borderColor:"gray.200",children:_types_types__WEBPACK_IMPORTED_MODULE_9__.Qb.map(arrowType=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_yamada_ui_react__WEBPACK_IMPORTED_MODULE_7__.Dr,{onClick:()=>onArrowTypeChange(arrowType),bg:currentArrowType===arrowType?"blue.50":"white",color:currentArrowType===arrowType?"blue.600":"gray.700",fontSize:"sm",children:(0,_hooks_mermaid__WEBPACK_IMPORTED_MODULE_8__.Vc)(arrowType)},arrowType))})})]});ArrowTypeSelector.__docgenInfo={description:"",methods:[],displayName:"ArrowTypeSelector"}},"./features/flowchart/hooks/mermaid.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{CP:()=>formatMermaidShape,I$:()=>generateMermaidCode,UF:()=>getArrowTypeSymbol,UY:()=>parseMermaidCode,Vc:()=>getArrowTypeDisplayName});const RESERVED_WORDS=new Set(["end","start","subgraph","class","classDef","click","style","linkStyle","direction","flowchart","graph","if","else","elseif","while","for","function","return","break","continue"]),getSafeVariableName=variableName=>{if(!variableName||""===variableName.trim())return"node_unnamed";let safeName=variableName.trim();return RESERVED_WORDS.has(safeName.toLowerCase())&&(safeName=`node_${safeName}`),/^[0-9]/.test(safeName)&&(safeName=`_${safeName}`),safeName=safeName.replace(/\s+/g,"_"),safeName=safeName.replace(/[^\w\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/g,"_"),safeName},formatMermaidShape=(shapeType,label)=>{switch(shapeType){case"rectangle":default:return`[${label}]`;case"diamond":return`{${label}}`;case"rounded":return`(${label})`;case"circle":return`((${label}))`;case"hexagon":return`{{${label}}}`;case"stadium":return`([${label}])`}},getArrowTypeSymbol=arrowType=>{switch(arrowType){case"arrow":default:return"→";case"thick":return"⇒";case"dotted":return"⇢";case"invisible":return"～";case"bidirectional":return"↔";case"bidirectional-thick":return"⇔"}},getArrowTypeDisplayName=arrowType=>{switch(arrowType){case"arrow":default:return"通常の矢印 (->)";case"thick":return"太い矢印 (==>)";case"dotted":return"点線矢印 (-.->)";case"invisible":return"非表示 (~~~)";case"bidirectional":return"双方向矢印 (<->)";case"bidirectional-thick":return"太い双方向矢印 (<==>)"}},generateMermaidCode=(flowData,direction="TD")=>{let code=`flowchart ${direction}\n`;return flowData.nodes.forEach(node=>{const variableName=node.data.variableName||`node${node.id}`,safeVariableName=getSafeVariableName(variableName),shapeType=node.data.shapeType||"rectangle",label=node.data.label||"",shapeCode=formatMermaidShape(shapeType,label);code+=`    ${safeVariableName}${shapeCode}\n`}),flowData.edges.forEach(edge=>{const sourceNode=flowData.nodes.find(node=>node.id===edge.source),targetNode=flowData.nodes.find(node=>node.id===edge.target);if(sourceNode&&targetNode){var _edge_data,_edge_data1;const sourceVariableName=getSafeVariableName(sourceNode.data.variableName||`node${sourceNode.id}`),targetVariableName=getSafeVariableName(targetNode.data.variableName||`node${targetNode.id}`),edgeLabel=null===(_edge_data=edge.data)||void 0===_edge_data?void 0:_edge_data.label,arrowCode=((arrowType="arrow",label)=>{const hasLabel=label&&""!==label.trim(),sanitizedLabel=hasLabel?(label=>label&&""!==label.trim()?/^\d+$/.test(label.trim())?label.trim():/^[a-zA-Z0-9\-_\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF\s]+$/.test(label)?label:`"${label.replace(/"/g,'\\"')}"`:label)(label):"";switch(arrowType){case"arrow":default:return hasLabel?` --\x3e|${sanitizedLabel}| `:" --\x3e ";case"thick":return hasLabel?` ==>|${sanitizedLabel}| `:" ==> ";case"dotted":return hasLabel?` -. ${sanitizedLabel} .-> `:" -.-> ";case"invisible":return hasLabel?` ~~~|${sanitizedLabel}| `:" ~~~ ";case"bidirectional":return hasLabel?` <--\x3e|${sanitizedLabel}| `:" <--\x3e ";case"bidirectional-thick":return hasLabel?` <==${sanitizedLabel}==> `:" <==> "}})((null===(_edge_data1=edge.data)||void 0===_edge_data1?void 0:_edge_data1.arrowType)||"arrow",edgeLabel);code+=`    ${sourceVariableName}${arrowCode}${targetVariableName}\n`}}),code},parseMermaidCode=mermaidCode=>{const result={nodes:[],edges:[]};if(!mermaidCode||""===mermaidCode.trim())return result;const contentLines=mermaidCode.split("\n").map(line=>line.trim()).filter(line=>line).filter(line=>!line.startsWith("flowchart")&&!line.startsWith("graph")),nodeRegistry=new Map;for(const line of contentLines){const nodeMatch=parseNodeDefinition(line);nodeMatch&&nodeRegistry.set(nodeMatch.id,nodeMatch)}for(const line of contentLines){const edgeMatch=parseEdgeDefinition(line);if(edgeMatch){if(!nodeRegistry.has(edgeMatch.source)){const sourceNodeInfo=extractNodeFromEdgeLine(line,edgeMatch.source);nodeRegistry.set(edgeMatch.source,sourceNodeInfo)}if(!nodeRegistry.has(edgeMatch.target)){const targetNodeInfo=extractNodeFromEdgeLine(line,edgeMatch.target);nodeRegistry.set(edgeMatch.target,targetNodeInfo)}result.edges.push(edgeMatch)}}return result.nodes=Array.from(nodeRegistry.values()),result},extractNodeFromEdgeLine=(line,nodeId)=>{const shapePatterns=[{pattern:"\\[([^\\]]*)\\]",shape:"rectangle"},{pattern:"\\(\\(([^\\)]*)\\)\\)",shape:"circle"},{pattern:"\\{\\{([^\\}]*)\\}\\}",shape:"hexagon"},{pattern:"\\(\\[([^\\]]*)\\]\\)",shape:"stadium"},{pattern:"\\(([^\\)]*)\\)",shape:"rounded"},{pattern:"\\{([^\\}]*)\\}",shape:"diamond"}];for(const{pattern,shape}of shapePatterns){const regex=new RegExp(`${nodeId}${pattern}`),match=line.match(regex);if(match)return{id:nodeId,variableName:nodeId,label:match[1]||nodeId,shapeType:shape}}return{id:nodeId,variableName:nodeId,label:nodeId,shapeType:"rectangle"}},parseNodeDefinition=line=>{if(line.includes("--\x3e")||line.includes("==>")||line.includes("-.->")||line.includes("~~~")||line.includes("<--\x3e")||line.includes("<==>"))return null;const patterns=[{regex:/^([a-zA-Z0-9_\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]+)\[([^\]]*)\]$/,shape:"rectangle"},{regex:/^([a-zA-Z0-9_\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]+)\(\(([^)]*)\)\)$/,shape:"circle"},{regex:/^([a-zA-Z0-9_\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]+)\{\{([^}]*)\}\}$/,shape:"hexagon"},{regex:/^([a-zA-Z0-9_\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]+)\(\[([^\]]*)\]\)$/,shape:"stadium"},{regex:/^([a-zA-Z0-9_\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]+)\(([^)]*)\)$/,shape:"rounded"},{regex:/^([a-zA-Z0-9_\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]+)\{([^}]*)\}$/,shape:"diamond"},{regex:/^([a-zA-Z0-9_\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]+)$/,shape:"rectangle"}];for(const pattern of patterns){const match=line.match(pattern.regex);if(match){const id=match[1],label=void 0!==match[2]?match[2]:id;if(id.includes(" "))continue;return{id,variableName:id,label,shapeType:pattern.shape}}}return null},parseEdgeDefinition=line=>{const nodeId="[a-zA-Z0-9_\\u3040-\\u309F\\u30A0-\\u30FF\\u4E00-\\u9FAF]+",nodeShape="(?:\\[[^\\]]*\\]|\\([^)]*\\)|\\{[^}]*\\}|\\(\\([^)]*\\)\\)|\\{\\{[^}]*\\}\\}|\\(\\[[^\\]]*\\]\\))?",patterns=[{regex:new RegExp(`^(${nodeId})${nodeShape}\\s*<==\\s*(.+?)\\s*==>\\s*(${nodeId})${nodeShape}$`),arrowType:"bidirectional-thick",labelPosition:"middle"},{regex:new RegExp(`^(${nodeId})${nodeShape}\\s*<==>\\s*(${nodeId})${nodeShape}$`),arrowType:"bidirectional-thick"},{regex:new RegExp(`^(${nodeId})${nodeShape}\\s*<--\x3e\\s*\\|\\s*([^|]*)\\s*\\|\\s*(${nodeId})${nodeShape}$`),arrowType:"bidirectional"},{regex:new RegExp(`^(${nodeId})${nodeShape}\\s*<--\\s*(.+?)\\s*--\x3e\\s*(${nodeId})${nodeShape}$`),arrowType:"bidirectional",labelPosition:"middle"},{regex:new RegExp(`^(${nodeId})${nodeShape}\\s*<--\x3e\\s*(${nodeId})${nodeShape}$`),arrowType:"bidirectional"},{regex:new RegExp(`^(${nodeId})${nodeShape}\\s*-\\.\\s*(.+?)\\s*\\.->\\s*(${nodeId})${nodeShape}$`),arrowType:"dotted",labelPosition:"sides"},{regex:new RegExp(`^(${nodeId})${nodeShape}\\s*-\\.\\s*->\\s*(${nodeId})${nodeShape}$`),arrowType:"dotted"},{regex:new RegExp(`^(${nodeId})${nodeShape}\\s*==>\\s*\\|\\s*([^|]*)\\s*\\|\\s*(${nodeId})${nodeShape}$`),arrowType:"thick"},{regex:new RegExp(`^(${nodeId})${nodeShape}\\s*==\\s*(.+?)\\s*==>\\s*(${nodeId})${nodeShape}$`),arrowType:"thick"},{regex:new RegExp(`^(${nodeId})${nodeShape}\\s*==>\\s*(${nodeId})${nodeShape}$`),arrowType:"thick"},{regex:new RegExp(`^(${nodeId})${nodeShape}\\s*--\x3e\\s*\\|\\s*([^|]*)\\s*\\|\\s*(${nodeId})${nodeShape}$`),arrowType:"arrow"},{regex:new RegExp(`^(${nodeId})${nodeShape}\\s*--\\s*(.+?)\\s*--\x3e\\s*(${nodeId})${nodeShape}$`),arrowType:"arrow"},{regex:new RegExp(`^(${nodeId})${nodeShape}\\s*--\x3e\\s*(${nodeId})${nodeShape}$`),arrowType:"arrow"}];for(const pattern of patterns){const match=line.match(pattern.regex);if(match){let source,target,label="";return"bidirectional-thick"===pattern.arrowType&&match.length>=4&&match[2]&&""!==match[2].trim()||"sides"===pattern.labelPosition&&match.length>=4||4===match.length?(source=match[1],label=match[2].trim(),target=match[3]):(source=match[1],target=match[2]),{id:`${source}-${target}`,source,target,label,arrowType:pattern.arrowType}}}return null}},"./features/flowchart/types/types.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{B8:()=>UI_CONSTANTS,LK:()=>SHAPE_OPTIONS,Qb:()=>ARROW_TYPES});const UI_CONSTANTS={DOUBLE_CLICK_THRESHOLD:300,DEBOUNCE_DELAY:150,IME_COMPOSITION_DELAY:100},ARROW_TYPES=["arrow","thick","dotted","invisible","bidirectional","bidirectional-thick"],SHAPE_OPTIONS=[{type:"rectangle",label:"四角形",symbol:"[ ]"},{type:"diamond",label:"菱形",symbol:"{ }"},{type:"rounded",label:"角丸四角",symbol:"( )"},{type:"circle",label:"円形",symbol:"(( ))"},{type:"hexagon",label:"六角形",symbol:"{{ }}"},{type:"stadium",label:"スタジアム",symbol:"([ ])"}]}}]);