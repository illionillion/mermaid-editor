"use strict";(self.webpackChunkmermaid_editor=self.webpackChunkmermaid_editor||[]).push([[996],{"./features/flowchart/stories/editor/variable-name-editor.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllShapes:()=>AllShapes,CircleShape:()=>CircleShape,Default:()=>Default,Editing:()=>Editing,Empty:()=>Empty,HexagonShape:()=>HexagonShape,RhombusShape:()=>RhombusShape,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/next@14.1.0_@babel+core@7.28.3_babel-plugin-macros@3.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/.pnpm/next@14.1.0_@babel+core@7.28.3_babel-plugin-macros@3.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js"),_features_flowchart_components_editor_variable_name_editor__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./features/flowchart/components/editor/variable-name-editor.tsx");const __WEBPACK_DEFAULT_EXPORT__={title:"components/editor/VariableNameEditor",component:_features_flowchart_components_editor_variable_name_editor__WEBPACK_IMPORTED_MODULE_2__.J,tags:["autodocs"],argTypes:{value:{control:"text",description:"変数名"},isEditing:{control:"boolean",description:"編集モードかどうか"},shapeType:{control:"select",options:["rectangle","rounded","stadium","subroutine","cylindrical","circle","asymmetric","rhombus","hexagon","parallelogram","parallelogram-alt","trapezoid","trapezoid-alt","double-circle"],description:"ノード形状タイプ"}},parameters:{docs:{description:{component:"VariableNameEditorコンポーネント\n@description ノードの変数名を表示・編集するコンポーネント\n- クリックで編集モードに切り替わる\n- Enterキーまたはフォーカス外しで編集を確定\n- 形状タイプに応じた記号表示（Mermaid記法）\n- ノードの左上に配置される小さなバッジ型エディタ"}}}},Default={render:()=>{const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("node1"),[isEditing,setIsEditing]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1),[isComposing,setIsComposing]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{position:"relative",width:"200px",height:"100px",padding:"20px",border:"1px solid #ccc"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_features_flowchart_components_editor_variable_name_editor__WEBPACK_IMPORTED_MODULE_2__.J,{value,isEditing,shapeType:"rectangle",onClick:()=>setIsEditing(!0),onChange:e=>setValue(e.target.value),onKeyDown:e=>{"Enter"!==e.key||isComposing||setIsEditing(!1)},onCompositionStart:()=>setIsComposing(!0),onCompositionEnd:()=>setIsComposing(!1),onBlur:()=>setIsEditing(!1)})})}},Editing={render:()=>{const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("editNode"),[isComposing,setIsComposing]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{position:"relative",width:"200px",height:"100px",padding:"20px",border:"1px solid #ccc"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_features_flowchart_components_editor_variable_name_editor__WEBPACK_IMPORTED_MODULE_2__.J,{value,isEditing:!0,shapeType:"rectangle",onClick:()=>{},onChange:e=>setValue(e.target.value),onKeyDown:e=>{"Enter"!==e.key||isComposing||alert("Enterキー押下")},onCompositionStart:()=>setIsComposing(!0),onCompositionEnd:()=>setIsComposing(!1),onBlur:()=>alert("フォーカスアウト")})})}},CircleShape={render:()=>{const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("circleNode"),[isEditing,setIsEditing]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1),[isComposing,setIsComposing]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{position:"relative",width:"200px",height:"100px",padding:"20px",border:"1px solid #ccc"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_features_flowchart_components_editor_variable_name_editor__WEBPACK_IMPORTED_MODULE_2__.J,{value,isEditing,shapeType:"circle",onClick:()=>setIsEditing(!0),onChange:e=>setValue(e.target.value),onKeyDown:e=>{"Enter"!==e.key||isComposing||setIsEditing(!1)},onCompositionStart:()=>setIsComposing(!0),onCompositionEnd:()=>setIsComposing(!1),onBlur:()=>setIsEditing(!1)})})}},RhombusShape={render:()=>{const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("decision"),[isEditing,setIsEditing]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1),[isComposing,setIsComposing]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{position:"relative",width:"200px",height:"100px",padding:"20px",border:"1px solid #ccc"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_features_flowchart_components_editor_variable_name_editor__WEBPACK_IMPORTED_MODULE_2__.J,{value,isEditing,shapeType:"rhombus",onClick:()=>setIsEditing(!0),onChange:e=>setValue(e.target.value),onKeyDown:e=>{"Enter"!==e.key||isComposing||setIsEditing(!1)},onCompositionStart:()=>setIsComposing(!0),onCompositionEnd:()=>setIsComposing(!1),onBlur:()=>setIsEditing(!1)})})}},HexagonShape={render:()=>{const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("process"),[isEditing,setIsEditing]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1),[isComposing,setIsComposing]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{position:"relative",width:"200px",height:"100px",padding:"20px",border:"1px solid #ccc"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_features_flowchart_components_editor_variable_name_editor__WEBPACK_IMPORTED_MODULE_2__.J,{value,isEditing,shapeType:"hexagon",onClick:()=>setIsEditing(!0),onChange:e=>setValue(e.target.value),onKeyDown:e=>{"Enter"!==e.key||isComposing||setIsEditing(!1)},onCompositionStart:()=>setIsComposing(!0),onCompositionEnd:()=>setIsComposing(!1),onBlur:()=>setIsEditing(!1)})})}},Empty={render:()=>{const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(""),[isEditing,setIsEditing]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1),[isComposing,setIsComposing]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{position:"relative",width:"200px",height:"100px",padding:"20px",border:"1px solid #ccc"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_features_flowchart_components_editor_variable_name_editor__WEBPACK_IMPORTED_MODULE_2__.J,{value,isEditing,shapeType:"rectangle",onClick:()=>setIsEditing(!0),onChange:e=>setValue(e.target.value),onKeyDown:e=>{"Enter"!==e.key||isComposing||setIsEditing(!1)},onCompositionStart:()=>setIsComposing(!0),onCompositionEnd:()=>setIsComposing(!1),onBlur:()=>setIsEditing(!1)})})}},AllShapes={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{display:"flex",flexWrap:"wrap",gap:"20px"},children:["rectangle","circle","rhombus","hexagon","stadium","cylindrical"].map(shape=>{const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(`${shape}Node`),[isEditing,setIsEditing]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1),[isComposing,setIsComposing]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{style:{position:"relative",width:"180px",height:"100px",padding:"20px",border:"1px solid #ccc"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{fontSize:"12px",marginBottom:"10px",textAlign:"center"},children:shape}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_features_flowchart_components_editor_variable_name_editor__WEBPACK_IMPORTED_MODULE_2__.J,{value,isEditing,shapeType:shape,onClick:()=>setIsEditing(!0),onChange:e=>setValue(e.target.value),onKeyDown:e=>{"Enter"!==e.key||isComposing||setIsEditing(!1)},onCompositionStart:()=>setIsComposing(!0),onCompositionEnd:()=>setIsComposing(!1),onBlur:()=>setIsEditing(!1)})]},shape)})})},__namedExportsOrder=["Default","Editing","CircleShape","RhombusShape","HexagonShape","Empty","AllShapes"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [value, setValue] = useState("node1");\n    const [isEditing, setIsEditing] = useState(false);\n    const [isComposing, setIsComposing] = useState(false);\n    return <div style={{\n      position: "relative",\n      width: "200px",\n      height: "100px",\n      padding: "20px",\n      border: "1px solid #ccc"\n    }}>\n        <VariableNameEditor value={value} isEditing={isEditing} shapeType="rectangle" onClick={() => setIsEditing(true)} onChange={e => setValue(e.target.value)} onKeyDown={e => {\n        if (e.key === "Enter" && !isComposing) {\n          setIsEditing(false);\n        }\n      }} onCompositionStart={() => setIsComposing(true)} onCompositionEnd={() => setIsComposing(false)} onBlur={() => setIsEditing(false)} />\n      </div>;\n  }\n}',...Default.parameters?.docs?.source},description:{story:"基本状態: Rectangle（長方形）",...Default.parameters?.docs?.description}}},Editing.parameters={...Editing.parameters,docs:{...Editing.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [value, setValue] = useState("editNode");\n    const [isComposing, setIsComposing] = useState(false);\n    return <div style={{\n      position: "relative",\n      width: "200px",\n      height: "100px",\n      padding: "20px",\n      border: "1px solid #ccc"\n    }}>\n        <VariableNameEditor value={value} isEditing={true} shapeType="rectangle" onClick={() => {}} onChange={e => setValue(e.target.value)} onKeyDown={e => {\n        if (e.key === "Enter" && !isComposing) {\n          alert("Enterキー押下");\n        }\n      }} onCompositionStart={() => setIsComposing(true)} onCompositionEnd={() => setIsComposing(false)} onBlur={() => alert("フォーカスアウト")} />\n      </div>;\n  }\n}',...Editing.parameters?.docs?.source},description:{story:"編集モード",...Editing.parameters?.docs?.description}}},CircleShape.parameters={...CircleShape.parameters,docs:{...CircleShape.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [value, setValue] = useState("circleNode");\n    const [isEditing, setIsEditing] = useState(false);\n    const [isComposing, setIsComposing] = useState(false);\n    return <div style={{\n      position: "relative",\n      width: "200px",\n      height: "100px",\n      padding: "20px",\n      border: "1px solid #ccc"\n    }}>\n        <VariableNameEditor value={value} isEditing={isEditing} shapeType="circle" onClick={() => setIsEditing(true)} onChange={e => setValue(e.target.value)} onKeyDown={e => {\n        if (e.key === "Enter" && !isComposing) {\n          setIsEditing(false);\n        }\n      }} onCompositionStart={() => setIsComposing(true)} onCompositionEnd={() => setIsComposing(false)} onBlur={() => setIsEditing(false)} />\n      </div>;\n  }\n}',...CircleShape.parameters?.docs?.source},description:{story:"各形状タイプ: Circle（円形）",...CircleShape.parameters?.docs?.description}}},RhombusShape.parameters={...RhombusShape.parameters,docs:{...RhombusShape.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [value, setValue] = useState("decision");\n    const [isEditing, setIsEditing] = useState(false);\n    const [isComposing, setIsComposing] = useState(false);\n    return <div style={{\n      position: "relative",\n      width: "200px",\n      height: "100px",\n      padding: "20px",\n      border: "1px solid #ccc"\n    }}>\n        <VariableNameEditor value={value} isEditing={isEditing} shapeType="rhombus" onClick={() => setIsEditing(true)} onChange={e => setValue(e.target.value)} onKeyDown={e => {\n        if (e.key === "Enter" && !isComposing) {\n          setIsEditing(false);\n        }\n      }} onCompositionStart={() => setIsComposing(true)} onCompositionEnd={() => setIsComposing(false)} onBlur={() => setIsEditing(false)} />\n      </div>;\n  }\n}',...RhombusShape.parameters?.docs?.source},description:{story:"各形状タイプ: Rhombus（菱形）",...RhombusShape.parameters?.docs?.description}}},HexagonShape.parameters={...HexagonShape.parameters,docs:{...HexagonShape.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [value, setValue] = useState("process");\n    const [isEditing, setIsEditing] = useState(false);\n    const [isComposing, setIsComposing] = useState(false);\n    return <div style={{\n      position: "relative",\n      width: "200px",\n      height: "100px",\n      padding: "20px",\n      border: "1px solid #ccc"\n    }}>\n        <VariableNameEditor value={value} isEditing={isEditing} shapeType="hexagon" onClick={() => setIsEditing(true)} onChange={e => setValue(e.target.value)} onKeyDown={e => {\n        if (e.key === "Enter" && !isComposing) {\n          setIsEditing(false);\n        }\n      }} onCompositionStart={() => setIsComposing(true)} onCompositionEnd={() => setIsComposing(false)} onBlur={() => setIsEditing(false)} />\n      </div>;\n  }\n}',...HexagonShape.parameters?.docs?.source},description:{story:"各形状タイプ: Hexagon（六角形）",...HexagonShape.parameters?.docs?.description}}},Empty.parameters={...Empty.parameters,docs:{...Empty.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [value, setValue] = useState("");\n    const [isEditing, setIsEditing] = useState(false);\n    const [isComposing, setIsComposing] = useState(false);\n    return <div style={{\n      position: "relative",\n      width: "200px",\n      height: "100px",\n      padding: "20px",\n      border: "1px solid #ccc"\n    }}>\n        <VariableNameEditor value={value} isEditing={isEditing} shapeType="rectangle" onClick={() => setIsEditing(true)} onChange={e => setValue(e.target.value)} onKeyDown={e => {\n        if (e.key === "Enter" && !isComposing) {\n          setIsEditing(false);\n        }\n      }} onCompositionStart={() => setIsComposing(true)} onCompositionEnd={() => setIsComposing(false)} onBlur={() => setIsEditing(false)} />\n      </div>;\n  }\n}',...Empty.parameters?.docs?.source},description:{story:"空の変数名",...Empty.parameters?.docs?.description}}},AllShapes.parameters={...AllShapes.parameters,docs:{...AllShapes.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const shapes: MermaidShapeType[] = ["rectangle", "circle", "rhombus", "hexagon", "stadium", "cylindrical"];\n    return <div style={{\n      display: "flex",\n      flexWrap: "wrap",\n      gap: "20px"\n    }}>\n        {shapes.map(shape => {\n        const [value, setValue] = useState(`${shape}Node`);\n        const [isEditing, setIsEditing] = useState(false);\n        const [isComposing, setIsComposing] = useState(false);\n        return <div key={shape} style={{\n          position: "relative",\n          width: "180px",\n          height: "100px",\n          padding: "20px",\n          border: "1px solid #ccc"\n        }}>\n              <div style={{\n            fontSize: "12px",\n            marginBottom: "10px",\n            textAlign: "center"\n          }}>{shape}</div>\n              <VariableNameEditor value={value} isEditing={isEditing} shapeType={shape} onClick={() => setIsEditing(true)} onChange={e => setValue(e.target.value)} onKeyDown={e => {\n            if (e.key === "Enter" && !isComposing) {\n              setIsEditing(false);\n            }\n          }} onCompositionStart={() => setIsComposing(true)} onCompositionEnd={() => setIsComposing(false)} onBlur={() => setIsEditing(false)} />\n            </div>;\n      })}\n      </div>;\n  }\n}',...AllShapes.parameters?.docs?.source},description:{story:"複数の形状を並べて比較",...AllShapes.parameters?.docs?.description}}}}}]);