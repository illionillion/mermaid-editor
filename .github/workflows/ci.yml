name: Quality

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: ["main", "dev"]
  pull_request_target:
    branches: ["main", "dev"]

jobs:
  # Stage 1: Code Quality and Type Check (all parallel)
  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and PNPM
        uses: ./.github/actions/install

      - name: Run ESLint
        run: pnpm lint

  prettier:
    name: Prettier
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and PNPM
        uses: ./.github/actions/install

      - name: Check code formatting
        run: pnpm format:check

  # Stage 1: Code Quality and Type Check (all parallel)
  type_script:
    name: TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and PNPM
        uses: ./.github/actions/install

      - name: Run TypeScript type check
        run: pnpm type-check

  # Stage 2: Testing and Building (parallel, depends on code quality and type check)
  unit_test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: [eslint, prettier, type_script]
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and PNPM
        uses: ./.github/actions/install

      - name: Run tests
        run: pnpm test:run

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Coverage Report as Comment
        uses: davelosert/vitest-coverage-report-action@v2
        if: github.event_name == 'pull_request'
        with:
          json-summary-path: "./coverage/coverage-summary.json"
          json-final-path: "./coverage/coverage-final.json"

  e2e_test:
    name: E2E Test
    runs-on: ubuntu-latest
    needs: [eslint, prettier, type_script]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and PNPM
        uses: ./.github/actions/install

      - name: Start Next.js dev server
        run: pnpm dev &

      - name: Wait for server
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Install Playwright
        run: pnpm exec playwright install

      - name: Run E2E tests
        run: pnpm test:e2e

  vrt_test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and start services
        run: docker compose -f compose.vrt.yml up -d --build

      - name: Wait for server
        run: npx wait-on http://localhost:6006 --timeout 180000

      - name: Run tests in container
        run: docker exec mermaid-editor-vrt pnpm test:vrt

      - name: Upload VRT diff images
        if: failure() && hashFiles('__image_snapshots__/__diff_output__/*.png') != ''
        uses: actions/upload-artifact@v4
        with:
          name: vrt-diff-images
          path: __image_snapshots__/__diff_output__/

      - name: Comment artifact link on PR
        if: failure() && hashFiles('__image_snapshots__/__diff_output__/*.png') != '' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request?.number;
            if (!pr) return;
            const runId = process.env.GITHUB_RUN_ID;
            const artifactUrl = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${runId}`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body: `❌ VRTテストが失敗しました。差分画像は [Actionsのアーティファクト](${artifactUrl}) から確認できます。`
            });

  # Stage 2: Testing and Building (parallel, depends on code quality and type check)
  build_next:
    name: Build Next.js
    runs-on: ubuntu-latest
    needs: [eslint, prettier, type_script]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and PNPM
        uses: ./.github/actions/install

      - name: Build application
        run: pnpm build

  build_storybook:
    name: Build Storybook
    runs-on: ubuntu-latest
    needs: [eslint, prettier, type_script]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and PNPM
        uses: ./.github/actions/install

      - name: Build Storybook
        run: pnpm build-storybook
